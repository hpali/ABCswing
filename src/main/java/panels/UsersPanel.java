/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panels;

import object.MouseAdapterForUserPanel;
import dao.UserDAO;
import dao.UserrolesDAO;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import main.MainWindow;
import common.RootWindow;
import object.User;
import object.Userroles;

/**
 *
 * @author Admin
 */
public class UsersPanel extends RootWindow {

    private MainWindow mainFrame;
    private ArrayList<User> users = new ArrayList<User>();
    private ArrayList<Userroles> userroles = new ArrayList<Userroles>();
    private UserDAO userDAO;
    private UserrolesDAO userrolesDAO;
    private String sUsername;
    private String sPassword;
    private String sAuthirity;
    private JTable table;
    private boolean DEBUG = false;

    public UsersPanel(MainWindow mainwindow) {
        this.mainFrame = mainwindow;
        this.userDAO = mainFrame.getDbManager().getUserDao();
        this.userrolesDAO = mainFrame.getDbManager().getUserrolesDAO();
        users = userDAO.getAllUsers();
        initComponents();
        afterInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void refresh() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void afterInit() {
        //super(new GridLayout(1, 0));
        String[] columnNames = new String[]{"User", "Password", "Full Name", "Authority"};
        /*{propLanguge.getProperty("username"),
         propLanguge.getProperty("password"),
         propLanguge.getProperty("fullname")};
         */
        /**
         * *******************************
         */

        /**
         * ******************************
         */
        String[][] rowData = new String[users.size()][4];
        for (int i = 0; i < users.size(); i++) {
            for (int j = 0; j < 4; j++) {
                if (j == 0) {
                    rowData[i][j] = users.get(i).getUsername();
                } else if (j == 1) {
                    rowData[i][j] = users.get(i).getPassword();
                } else if (j == 2) {
                    rowData[i][j] = users.get(i).getFullname();
                } else {
                    rowData[i][j] = userrolesDAO.getRolesName(users.get(i));
                }
            }
        }

        // UserTable table = new UserTable(userek);
        table = new JTable(new DefaultTableModel(rowData, columnNames));
        table.setPreferredScrollableViewportSize(new Dimension(500, 70));
        setUpSportColumn(table, table.getColumnModel().getColumn(3));

        table.setFillsViewportHeight(true);
        table.setAutoCreateRowSorter(true);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); // itt tudom beállítani,hogy hány sort töröljön ki
        //   table.setSize(400, 800);
        table.setSize(getPreferredSize());

        table.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (isDEBUG()) {
                    printDebugData(getTable());
                }
                JTable target = (JTable) e.getSource();
                MouseAdapterForUserPanel MyMause = new MouseAdapterForUserPanel(users);
                setsUsername(MyMause.getUserName(e));
            }
        });

        //Create the scroll pane and add the table to it.
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setSize(getPreferredSize());
        //Add the scroll pane to this panel.
        add(scrollPane);
        setVisible(true);
        revalidate();
        repaint();
    }

    public void setUpSportColumn(JTable table, TableColumn sportColumn) {
        //Set up the editor for the sport cells.
        JComboBox comboBox = new JComboBox();
        comboBox.addItem("SUPERVISOR");
        comboBox.addItem("NORMALUSER");
        comboBox.setVisible(true);
        sportColumn.setCellEditor(new DefaultCellEditor(comboBox));
        //Set up tool tips for the sport cells.
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setToolTipText("Click for combo box");
        sportColumn.setCellRenderer(renderer);
    }

    private void printDebugData(JTable table) {
        int numRows = table.getRowCount();
        int numCols = table.getColumnCount();
        javax.swing.table.TableModel model = table.getModel();

        System.out.println("Value of data: ");
        for (int i = 0; i < numRows; i++) {
            System.out.print("    row " + i + ":");
            for (int j = 0; j < numCols; j++) {
                System.out.print("  " + model.getValueAt(i, j));
            }
            System.out.println();
        }
        System.out.println("--------------------------");
    }

    public String getsUsername() {
        return sUsername;
    }

    public void setsUsername(String sUsername) {
        this.sUsername = sUsername;
    }

    public JTable getTable() {
        return table;
    }

    public void setTable(JTable table) {
        this.table = table;
    }

    public boolean isDEBUG() {
        return DEBUG;
    }

    public void setDEBUG(boolean DEBUG) {
        this.DEBUG = DEBUG;
    }

    public MainWindow getMainFrame() {
        return mainFrame;
    }

    public void setMainFrame(MainWindow mainFrame) {
        this.mainFrame = mainFrame;
    }

    public ArrayList<User> getUsers() {
        return users;
    }

    public void setUsers(ArrayList<User> users) {
        this.users = users;
    }

    public ArrayList<Userroles> getUserroles() {
        return userroles;
    }

    public void setUserroles(ArrayList<Userroles> userroles) {
        this.userroles = userroles;
    }

    public UserDAO getUserDAO() {
        return userDAO;
    }

    public void setUserDAO(UserDAO userDAO) {
        this.userDAO = userDAO;
    }

    public UserrolesDAO getUserrolesDAO() {
        return userrolesDAO;
    }

    public void setUserrolesDAO(UserrolesDAO userrolesDAO) {
        this.userrolesDAO = userrolesDAO;
    }

    public String getsPassword() {
        return sPassword;
    }

    public void setsPassword(String sPassword) {
        this.sPassword = sPassword;
    }

    public String getsAuthirity() {
        return sAuthirity;
    }

    public void setsAuthirity(String sAuthirity) {
        this.sAuthirity = sAuthirity;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
